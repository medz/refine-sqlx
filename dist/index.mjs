function E(e,a){const n=Object.keys(a).join(", "),r=Object.keys(a).map(()=>"?").join(", ");return{sql:`INSERT INTO ${e} (${n}) VALUES (${r})`,args:Object.values(a)}}function m(e,a,n){const r=Object.keys(n).map(p=>`${p} = ?`).join(", "),s=$([a]),i=`UPDATE ${e} SET ${r} ${s.sql}`,c=[...Object.values(n),...s.args];return{sql:i,args:c}}function b(e,a){const n=$([a]),r=`DELETE FROM ${e} ${n.sql}`,s=n.args;return{sql:r,args:s}}function I(e,a){const n=$([a]),r=`SELECT * FROM ${e} ${n.sql}`,s=n.args;return{sql:r,args:s}}function h({columnNames:e,rows:a}){return a.map(n=>Object.fromEntries(e.map((r,s)=>[r,n[s]])))}function A(e){if(!e)return;const{pageSize:a=10,current:n=1}=e;return{sql:"LIMIT ? OFFSET ?",args:[a,(n-1)*a]}}function B(e){return e?.length?{sql:e.map(({field:a,order:n})=>`${a} ${n.toUpperCase()}`).join(", "),args:[]}:void 0}function $(e){if(!e?.length)return;const a=q(e);if(a?.parts)return{sql:a.parts.join(" AND "),args:a.values}}function q(e){const a=[],n=[];for(const r of e){if("field"in r){const i=x(r);i.part&&(a.push(i.part),n.push(...i.values));continue}const s=D(r);s?.part&&(a.push(s.part),n.push(...s.values))}if(a.length)return{parts:a,values:n}}function x(e){switch(e.operator){case"eq":return{part:`"${e.field}" = ?`,values:[e.value]};case"ne":return{part:`"${e.field}" != ?`,values:[e.value]};case"lt":return{part:`"${e.field}" < ?`,values:[e.value]};case"gt":return{part:`"${e.field}" > ?`,values:[e.value]};case"lte":return{part:`"${e.field}" <= ?`,values:[e.value]};case"gte":return{part:`"${e.field}" >= ?`,values:[e.value]};case"in":case"ina":return{part:`"${e.field}" IN (${e.value.map(()=>"?").join(", ")})`,values:[...e.value]};case"nin":case"nina":return{part:`"${e.field}" NOT IN (${e.value.map(()=>"?").join(", ")})`,values:[...e.value]};case"contains":return{part:`"${e.field}" LIKE ?`,values:[`%${e.value}%`]};case"ncontains":return{part:`"${e.field}" NOT LIKE ?`,values:[`%${e.value}%`]};case"containss":return{part:`"${e.field}" LIKE ? COLLATE BINARY`,values:[`%${e.value}%`]};case"ncontainss":return{part:`"${e.field}" NOT LIKE ? COLLATE BINARY`,values:[`%${e.value}%`]};case"null":return{part:`"${e.field}" IS NULL`,values:[]};case"nnull":return{part:`"${e.field}" IS NOT NULL`,values:[]};case"startswith":return{part:`"${e.field}" LIKE ?`,values:[`${e.value}%`]};case"nstartswith":return{part:`"${e.field}" NOT LIKE ?`,values:[`${e.value}%`]};case"startswiths":return{part:`"${e.field}" LIKE ? COLLATE BINARY`,values:[`${e.value}%`]};case"nstartswiths":return{part:`"${e.field}" NOT LIKE ? COLLATE BINARY`,values:[`${e.value}%`]};case"endswith":return{part:`"${e.field}" LIKE ?`,values:[`%${e.value}`]};case"nendswith":return{part:`"${e.field}" NOT LIKE ?`,values:[`%${e.value}`]};case"endswiths":return{part:`"${e.field}" LIKE ? COLLATE BINARY`,values:[`%${e.value}`]};case"nendswiths":return{part:`"${e.field}" NOT LIKE ? COLLATE BINARY`,values:[`%${e.value}`]};case"between":return{part:`"${e.field}" BETWEEN ? AND ?`,values:[e.value[0],e.value[1]]};case"nbetween":return{part:`"${e.field}" NOT BETWEEN ? AND ?`,values:[e.value[0],e.value[1]]};default:throw new Error(`Unknown filter operator: ${e.operator}`)}}function D(e){const a=q(e.value);if(!a?.parts.length)return;const n=e.operator.toUpperCase();return{part:a.parts.length>1?`(${a.parts.join(` ${n} `)})`:a.parts[0],values:a.values}}function L(e){return{query:a,execute:n};async function a(r){const s=e.prepare(r.sql).bind(...r.args);return{columnNames:s.columns().map(i=>i.name),rows:s.raw().all()}}async function n(r){const s=e.prepare(r.sql).bind(...r.args).run();return{changes:s.changes,lastInsertId:s.lastInsertRowid}}}function N(e){return{query:a,execute:n};async function a(r){const s=e.prepare(r.sql),i=s.values(...r.args);return{columnNames:s.columnNames,rows:i}}async function n(r){const s=e.prepare(r.sql).run(...r.args);return{changes:s.changes,lastInsertId:s.lastInsertRowid}}}function K(e){return{query:a,execute:n};async function a(r){const s=e.prepare(r.sql).bind(r.args),[i,...c]=await s.raw({columnNames:!0});return{columnNames:i,rows:c}}async function n(r){const s=await e.prepare(r.sql).bind(r.args).run();return{changes:s.meta.changes,lastInsertId:s.meta.last_row_id}}}function T(e){return{query:a,execute:n};async function a(r){const s=e.prepare(r.sql),i=s.all(...r.args),c=s.columns().map(f=>f.column).filter(Boolean),p=[];for(const f of i){const w=[];for(const y in f)w.push(f[y]);p.push(w)}return{columnNames:c,rows:p}}async function n(r){const s=e.prepare(r.sql).run(...r.args);return{changes:s.changes,lastInsertId:s.lastInsertRowid}}}function M(e,a){let n;return{connect:r};async function r(){if(n!=null)return n;const s=U();if(s==="cloudflare-worker"){if(typeof e=="object"&&"prepare"in e)return n=K(e);throw new Error("Cloudflare D1 must provide a D1Database instance")}else if(s==="bun"){if(typeof e=="object"&&"prepare"in e)return n=N(e);const{Database:i}=await import("bun:sqlite"),c=new i(e,a?.bun);return n=N(c)}else if(s==="node")try{if(typeof e=="object"&&"prepare"in e)return n=T(e);const{DatabaseSync:i}=await import("node:sqlite"),c=new i(e,a?.node);return n=T(c)}catch{}try{if(typeof e=="object"&&"prepare"in e)return n=L(e);const{default:i}=await import("better-sqlite3"),c=new i(e,a?.["better-sqlite3"]);return n=L(c)}catch{throw new Error("Current runtime not supported SQLite, Please use [bun](https://bun.sh)/[Node.JS](https://nodejs.org/) >= 24 or install [better-sqlite3](https://github.com/WiseLibs/better-sqlite3)")}}}function U(){if(typeof navigator<"u"&&navigator?.userAgent.toLowerCase().includes("cloudflare"))return"cloudflare-worker";if("Bun"in globalThis&&typeof globalThis?.Bun?.sql=="function")return"bun";if("process"in globalThis&&process?.versions?.node&&process?.version?.toLowerCase()?.startsWith("v24"))return"node"}function F(e,a){let n;return{getList:s,getMany:i,getOne:c,create:p,createMany:f,update:w,updateMany:y,deleteOne:O,deleteMany:j};async function r(){return n||(n=await(typeof e=="object"&&"connect"in e?e:M(e,a)).connect(),n)}async function s(t){const l=await r(),u=["SELECT * FROM",t.resource],o=[],d=$(t.filters);d?.sql&&(u.push("WHERE",d.sql),o.push(...d.args));const g=B(t.sorters);g&&u.push("ORDER BY",g.sql);const v=A(t.pagination);v?.sql&&(u.push(v.sql),o.push(...v.args));const R=await l.query({sql:u.join(" "),args:o}),C=h(R),{rows:[[S]]}=await l.query({sql:`SELECT COUNT(*) FROM ${t.resource}`,args:[]});return{total:S,data:C}}async function i(t){if(!t.ids.length)return{data:[]};const l=await r(),u=I(t.resource,{field:"id",operator:"in",value:t.ids}),o=await l.query(u);return{data:h(o)}}async function c(t){const l=await r(),u=I(t.resource,{field:"id",operator:"eq",value:t.id}),o=await l.query(u),[d]=h(o);return{data:d}}async function p(t){const l=await r(),u=E(t.resource,t.variables),{lastInsertId:o}=await l.execute(u);if(!o)throw new Error("Create operation failed");return c({resource:t.resource,id:o})}async function f(t){if(!t.variables.length)return{data:[]};const l=await r();if(l.transaction){const u=await l.transaction(async o=>Promise.all(t.variables.map(async d=>{const g=E(t.resource,t.variables),{lastInsertId:v}=await o.execute(g);if(!v)throw new Error("Failed to create record");return v})));return i({resource:t.resource,ids:u})}else if(l.batch){const u=t.variables.map(o=>E(t.resource,o));return{data:(await l.batch(u)).map(o=>{if(!("changes"in o||"lastInsertId"in o))return h(o)}).filter(Boolean)}}return{data:(await Promise.all(t.variables.map(u=>p({resource:t.resource,variables:u})))).map(u=>u.data)}}async function w(t){const l=await r(),u=m(t.resource,{field:"id",operator:"eq",value:t.id},t.variables);return await l.execute(u),c(t)}async function y(t){if(!t.ids.length)return{data:[]};const l=await r(),u=m(t.resource,{field:"id",operator:"in",value:t.ids},t.variables);return await l.execute(u),i(t)}async function O(t){const l=await r(),u=await c(t),o=b(t.resource,{field:"id",operator:"eq",value:t.id});return await l.execute(o),u}async function j(t){if(!t.ids.length)return Promise.resolve({data:[]});const l=i(t),u=await r(),o=b(t.resource,{field:"id",operator:"in",value:t.ids});return await u.execute(o),l}}export{F as createRefineSQLite};
