"use strict";function createInsertQuery(e,a){const n=Object.keys(a).join(", "),r=Object.keys(a).map(()=>"?").join(", ");return{sql:`INSERT INTO ${e} (${n}) VALUES (${r})`,args:Object.values(a)}}function createUpdateQuery(e,a,n){const r=Object.keys(n).map(g=>`${g} = ?`).join(", "),o=createCrudFilters([a]),f=`UPDATE ${e} SET ${r} ${o.sql}`,w=[...Object.values(n),...o.args];return{sql:f,args:w}}function createDeleteQuery(e,a){const n=createCrudFilters([a]),r=`DELETE FROM ${e} ${n.sql}`,o=n.args;return{sql:r,args:o}}function createSelectQuery(e,a){const n=createCrudFilters([a]),r=`SELECT * FROM ${e} ${n.sql}`,o=n.args;return{sql:r,args:o}}function deserializeSqlResult({columnNames:e,rows:a}){return a.map(n=>Object.fromEntries(e.map((r,o)=>[r,n[o]])))}function createPagination(e){if(!e)return;const{pageSize:a=10,current:n=1}=e;return{sql:"LIMIT ? OFFSET ?",args:[a,(n-1)*a]}}function createCrudSorting(e){return e?.length?{sql:e.map(({field:a,order:n})=>`${a} ${n.toUpperCase()}`).join(", "),args:[]}:void 0}function createCrudFilters(e){if(!e?.length)return;const a=u(e);if(a?.parts)return{sql:a.parts.join(" AND "),args:a.values}}function u(e){const a=[],n=[];for(const r of e){if("field"in r){const f=p$1(r);f.part&&(a.push(f.part),n.push(...f.values));continue}const o=i$1(r);o?.part&&(a.push(o.part),n.push(...o.values))}if(a.length)return{parts:a,values:n}}function p$1(e){switch(e.operator){case"eq":return{part:`"${e.field}" = ?`,values:[e.value]};case"ne":return{part:`"${e.field}" != ?`,values:[e.value]};case"lt":return{part:`"${e.field}" < ?`,values:[e.value]};case"gt":return{part:`"${e.field}" > ?`,values:[e.value]};case"lte":return{part:`"${e.field}" <= ?`,values:[e.value]};case"gte":return{part:`"${e.field}" >= ?`,values:[e.value]};case"in":case"ina":return{part:`"${e.field}" IN (${e.value.map(()=>"?").join(", ")})`,values:[...e.value]};case"nin":case"nina":return{part:`"${e.field}" NOT IN (${e.value.map(()=>"?").join(", ")})`,values:[...e.value]};case"contains":return{part:`"${e.field}" LIKE ?`,values:[`%${e.value}%`]};case"ncontains":return{part:`"${e.field}" NOT LIKE ?`,values:[`%${e.value}%`]};case"containss":return{part:`"${e.field}" LIKE ? COLLATE BINARY`,values:[`%${e.value}%`]};case"ncontainss":return{part:`"${e.field}" NOT LIKE ? COLLATE BINARY`,values:[`%${e.value}%`]};case"null":return{part:`"${e.field}" IS NULL`,values:[]};case"nnull":return{part:`"${e.field}" IS NOT NULL`,values:[]};case"startswith":return{part:`"${e.field}" LIKE ?`,values:[`${e.value}%`]};case"nstartswith":return{part:`"${e.field}" NOT LIKE ?`,values:[`${e.value}%`]};case"startswiths":return{part:`"${e.field}" LIKE ? COLLATE BINARY`,values:[`${e.value}%`]};case"nstartswiths":return{part:`"${e.field}" NOT LIKE ? COLLATE BINARY`,values:[`${e.value}%`]};case"endswith":return{part:`"${e.field}" LIKE ?`,values:[`%${e.value}`]};case"nendswith":return{part:`"${e.field}" NOT LIKE ?`,values:[`%${e.value}`]};case"endswiths":return{part:`"${e.field}" LIKE ? COLLATE BINARY`,values:[`%${e.value}`]};case"nendswiths":return{part:`"${e.field}" NOT LIKE ? COLLATE BINARY`,values:[`%${e.value}`]};case"between":return{part:`"${e.field}" BETWEEN ? AND ?`,values:[e.value[0],e.value[1]]};case"nbetween":return{part:`"${e.field}" NOT BETWEEN ? AND ?`,values:[e.value[0],e.value[1]]};default:throw new Error(`Unknown filter operator: ${e.operator}`)}}function i$1(e){const a=u(e.value);if(!a?.parts.length)return;const n=e.operator.toUpperCase();return{part:a.parts.length>1?`(${a.parts.join(` ${n} `)})`:a.parts[0],values:a.values}}function i(e){return{query:a,execute:n};async function a(r){const o=e.prepare(r.sql).bind(...r.args);return{columnNames:o.columns().map(f=>f.name),rows:o.raw().all()}}async function n(r){const o=e.prepare(r.sql).bind(...r.args).run();return{changes:o.changes,lastInsertId:o.lastInsertRowid}}}function s(e){return{query:a,execute:n};async function a(r){const o=e.prepare(r.sql),f=o.values(...r.args);return{columnNames:o.columnNames,rows:f}}async function n(r){const o=e.prepare(r.sql).run(...r.args);return{changes:o.changes,lastInsertId:o.lastInsertRowid}}}function p(e){return{query:a,execute:n};async function a(r){const o=e.prepare(r.sql).bind(r.args),[f,...w]=await o.raw({columnNames:!0});return{columnNames:f,rows:w}}async function n(r){const o=await e.prepare(r.sql).bind(r.args).run();return{changes:o.meta.changes,lastInsertId:o.meta.last_row_id}}}function l(e){return{query:a,execute:n};async function a(r){const o=e.prepare(r.sql),f=o.all(...r.args),w=o.columns().map($=>$.column).filter(Boolean),g=[];for(const $ of f){const m=[];for(const I in $)m.push($[I]);g.push(m)}return{columnNames:w,rows:g}}async function n(r){const o=e.prepare(r.sql).run(...r.args);return{changes:o.changes,lastInsertId:o.lastInsertRowid}}}function h(e,a){let n;return{connect:r};async function r(){if(n!=null)return n;const o=detectSupportRuntime();if(o==="cloudflare-worker"){if(typeof e=="object"&&"prepare"in e)return n=p(e);throw new Error("Cloudflare D1 must provide a D1Database instance")}else if(o==="bun"){if(typeof e=="object"&&"prepare"in e)return n=s(e);const{Database:f}=await import("bun:sqlite"),w=new f(e,a?.bun);return n=s(w)}else if(o==="node")try{if(typeof e=="object"&&"prepare"in e)return n=l(e);const{DatabaseSync:f}=await import("node:sqlite"),w=new f(e,a?.node);return n=l(w)}catch{}try{if(typeof e=="object"&&"prepare"in e)return n=i(e);const{default:f}=await import("better-sqlite3"),w=new f(e,a?.["better-sqlite3"]);return n=i(w)}catch{throw new Error("Current runtime not supported SQLite, Please use [bun](https://bun.sh)/[Node.JS](https://nodejs.org/) >= 24 or install [better-sqlite3](https://github.com/WiseLibs/better-sqlite3)")}}}function detectSupportRuntime(){if(typeof navigator<"u"&&navigator?.userAgent.toLowerCase().includes("cloudflare"))return"cloudflare-worker";if("Bun"in globalThis&&typeof globalThis?.Bun?.sql=="function")return"bun";if("process"in globalThis&&process?.versions?.node&&process?.version?.toLowerCase()?.startsWith("v24"))return"node"}function dataProvider(e,a){let n;return{getList:o,getMany:f,getOne:w,create:g,createMany:$,update:m,updateMany:I,deleteOne:q,deleteMany:L};async function r(){return n||(n=await(typeof e=="object"&&"connect"in e?e:h(e,a)).connect(),n)}async function o(t){const v=await r(),c=["SELECT * FROM",t.resource],d=[],y=createCrudFilters(t.filters);y?.sql&&(c.push("WHERE",y.sql),d.push(...y.args));const b=createCrudSorting(t.sorters);b&&c.push("ORDER BY",b.sql);const E=createPagination(t.pagination);E?.sql&&(c.push(E.sql),d.push(...E.args));const N=await v.query({sql:c.join(" "),args:d}),T=deserializeSqlResult(N),{rows:[[O]]}=await v.query({sql:`SELECT COUNT(*) FROM ${t.resource}`,args:[]});return{total:O,data:T}}async function f(t){if(!t.ids.length)return{data:[]};const v=await r(),c=createSelectQuery(t.resource,{field:"id",operator:"in",value:t.ids}),d=await v.query(c);return{data:deserializeSqlResult(d)}}async function w(t){const v=await r(),c=createSelectQuery(t.resource,{field:"id",operator:"eq",value:t.id}),d=await v.query(c),[y]=deserializeSqlResult(d);return{data:y}}async function g(t){const v=await r(),c=createInsertQuery(t.resource,t.variables),{lastInsertId:d}=await v.execute(c);if(!d)throw new Error("Create operation failed");return w({resource:t.resource,id:d})}async function $(t){if(!t.variables.length)return{data:[]};const v=await r();if(v.transaction){const c=await v.transaction(async d=>Promise.all(t.variables.map(async y=>{const b=createInsertQuery(t.resource,t.variables),{lastInsertId:E}=await d.execute(b);if(!E)throw new Error("Failed to create record");return E})));return f({resource:t.resource,ids:c})}else if(v.batch){const c=t.variables.map(d=>createInsertQuery(t.resource,d));return{data:(await v.batch(c)).map(d=>{if(!("changes"in d||"lastInsertId"in d))return deserializeSqlResult(d)}).filter(Boolean)}}return{data:(await Promise.all(t.variables.map(c=>g({resource:t.resource,variables:c})))).map(c=>c.data)}}async function m(t){const v=await r(),c=createUpdateQuery(t.resource,{field:"id",operator:"eq",value:t.id},t.variables);return await v.execute(c),w(t)}async function I(t){if(!t.ids.length)return{data:[]};const v=await r(),c=createUpdateQuery(t.resource,{field:"id",operator:"in",value:t.ids},t.variables);return await v.execute(c),f(t)}async function q(t){const v=await r(),c=await w(t),d=createDeleteQuery(t.resource,{field:"id",operator:"eq",value:t.id});return await v.execute(d),c}async function L(t){if(!t.ids.length)return Promise.resolve({data:[]});const v=f(t),c=await r(),d=createDeleteQuery(t.resource,{field:"id",operator:"in",value:t.ids});return await c.execute(d),v}}exports.createRefineSQLite=dataProvider;
