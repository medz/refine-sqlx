name: CI/CD with SQLite Support

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_OPTIONS: --experimental-sqlite

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22, 24]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install workspace dependencies
        run: npm install --workspaces
      
      - name: Setup test environment
        run: |
          echo "Setting up test environment..."
          mkdir -p ./test-data
          mkdir -p ./temp-test-data
          chmod -R 755 ./test-data
          chmod -R 755 ./temp-test-data
          echo "Test directories created with proper permissions"
          
          # Test SQLite functionality
          echo "Testing SQLite support..."
          node --experimental-sqlite -e "console.log('SQLite experimental flag working')"
          
          # Test file system permissions
          echo "Testing file write permissions..."
          echo "test-data" > ./test-write.txt
          if [ -f ./test-write.txt ]; then
            echo "File write permissions OK"
            rm -f ./test-write.txt
          else
            echo "File write permissions FAILED"
          fi
          
          # Clean up old test databases
          echo "Cleaning up old test databases..."
          find . -name "test-*.db" -delete 2>/dev/null || true
          find . -name "*.test.db" -delete 2>/dev/null || true
          rm -f test-nodejs.db
      
      - name: Run tests
        run: npm run test:run
        env:
          NODE_OPTIONS: --experimental-sqlite
          CI: true
      
      - name: Run workspace tests
        run: npm run test:all
        env:
          NODE_OPTIONS: --experimental-sqlite
          CI: true
      
      - name: Build packages
        run: |
          npm run build
          npm run build:all
        
      - name: Verify build output
        run: |
          if [ -d "dist" ]; then
            echo "Main build successful"
            ls -la dist/
          else
            echo "Main build failed - no dist directory"
          fi

  test-with-coverage:
    name: Test with Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install workspace dependencies
        run: npm install --workspaces
      
      - name: Setup test environment
        run: |
          mkdir -p ./test-data ./temp-test-data
          chmod -R 755 ./test-data ./temp-test-data
          find . -name "test-*.db" -delete 2>/dev/null || true
          find . -name "*.test.db" -delete 2>/dev/null || true
          rm -f test-nodejs.db
      
      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_OPTIONS: --experimental-sqlite
          CI: true

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Install workspace dependencies
        run: npm install --workspaces
      
      - name: Build all packages
        run: npm run build:all
      
      - name: Publish refine-sql
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish refine-orm
        run: npm publish --workspace=packages/refine-orm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
